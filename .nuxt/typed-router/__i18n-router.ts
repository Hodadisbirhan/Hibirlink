// @ts-nocheck
// eslint-disable
// ---------------------------------------------------
// ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
// ---------------------------------------------------

import type { RouteLocationRaw } from 'vue-router';
import { useLocalePath as _useLocalePath, useLocaleRoute as _useLocaleRoute } from '#imports';
import type {
  TypedRouteLocationRawFromName,
  TypedLocationAsRelativeRaw,
  TypedRouteFromName,
} from './__router';
import type { RoutesNamesList } from './__routes';
import type {
  TypedLocalePathParameter,
  TypedPathParameter,
  RouteNameFromLocalePath,
} from './__paths';

export type I18nLocales = string;

export type NuxtLocaleRoute<
  T extends RoutesNamesList,
  P extends string,
  E extends boolean = false,
> = TypedRouteLocationRawFromName<T, P> | (E extends true ? string : TypedPathParameter<P>);

export interface TypedToLocalePath {
  <T extends RoutesNamesList, P extends string>(
    to: TypedRouteLocationRawFromName<T, P>,
    locale?: I18nLocales | undefined
  ): [T] extends [never]
    ? string
    : Required<
        Omit<Exclude<RouteLocationRaw, string>, 'name' | 'params'> & TypedLocationAsRelativeRaw<T>
      >;
  <T extends string>(
    to: TypedPathParameter<T>,
    locale?: I18nLocales | undefined
  ): [T] extends [never]
    ? string
    : Required<TypedRouteLocationRawFromName<RouteNameFromLocalePath<T>, T>>;
}

export function useLocalePath(): TypedToLocalePath {
  return _useLocalePath() as any;
}

export interface TypedLocaleRoute {
  <T extends RoutesNamesList, P extends string>(
    to: TypedRouteLocationRawFromName<T, P>,
    locale?: I18nLocales | undefined
  ): TypedRouteFromName<T>;
  <T extends string>(
    to: TypedPathParameter<T>,
    locale?: I18nLocales | undefined
  ): TypedRouteFromName<RouteNameFromLocalePath<T>>;
}

export function useLocaleRoute(): TypedLocaleRoute {
  return _useLocaleRoute() as any;
}
